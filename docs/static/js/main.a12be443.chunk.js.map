{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.js","components/GifGridItem.jsx","components/Gifgrid.jsx","hooks/useFetchGifs.js","components/GitExpertApp.jsx","index.js"],"names":["AddCategory","addCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","gif","id","title","images","downsized_medium","GifGridItem","className","src","alt","Gifgrid","loading","state","setState","useEffect","then","useFetchGifs","key","GitExpertApp","setCategories","ReactDOM","render","document","getElementById"],"mappings":"qMA4BeA,EAzBK,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EACHC,mBAAS,IADN,mBAChCC,EADgC,KACpBC,EADoB,KAcvC,OACE,0BAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAY,SAACS,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC5CN,EAAc,OAMd,2BAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAdhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,Y,uBCNdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,0DAC0CC,UAC7DH,GAFmB,sDAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXjB,kBAcdM,GAdc,4CAAH,sDCWLO,EATK,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAC5B,OACE,yBAAKc,UAAU,0CACb,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCgBKO,EAlBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDN,SAACA,GAAc,IAAD,EACdd,mBAAS,CAAEqB,KAAM,GAAIa,SAAS,IADhB,mBACjCC,EADiC,KAC1BC,EAD0B,KAYxC,OATAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAAChB,GACtBc,EAAS,CACPf,KAAMC,EACNY,SAAS,SAGZ,CAACpB,IAEGqB,EDVyBI,CAAazB,GAA/BQ,EADkB,EACxBD,KAAYa,EADY,EACZA,QAEpB,OACE,oCACE,wBAAIJ,UAAU,qCACXhB,GAEFoB,GAAW,uBAAGJ,UAAU,oCAAb,iBACZ,yBAAKA,UAAU,aACZR,EAAKC,KAAI,SAACC,GAAD,OACR,kBAAC,EAAD,eAAagB,IAAKhB,EAAIC,IAAQD,UEMzBiB,EAjBM,WAAO,IAAD,EACWzC,mBAAS,CAAC,cADrB,mBAClBQ,EADkB,KACNkC,EADM,KAGzB,OACE,oCACE,4CACA,kBAAC,EAAD,CAAa3C,YAAa2C,IAC1B,6BACA,4BACGlC,EAAWe,KAAI,SAACT,GAAD,OACd,kBAAC,EAAD,CAAS0B,IAAK1B,EAAUA,SAAUA,U,MCT5C6B,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.a12be443.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ addCategory }) => {\n  const [inputValue, setInputValue] = useState('');\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.trim().length > 2) {\n      addCategory((categories) => [inputValue, ...categories]);\n      setInputValue('');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  addCategory: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?limit=10&q=${encodeURI(\n    category\n  )}&api_key=KzBUHGTAFsK94lN0hRVHnJcSFG4B58Y7`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map((gif) => {\n    return {\n      id: gif.id,\n      title: gif.title,\n      url: gif.images?.downsized_medium.url,\n    };\n  });\n  return gifs;\n};\n","import React from 'react';\n\nconst GifGridItem = ({ title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n\nexport default GifGridItem;\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst Gifgrid = ({ category }) => {\n  const { data: gifs, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn\">\n        {category}\n      </h3>\n      {loading && <p className=\"animate__animated animate__flash\">Cargando Gifs</p>}\n      <div className=\"card-grid\">\n        {gifs.map((gif) => (\n          <GifGridItem key={gif.id} {...gif} />\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default Gifgrid;\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({ data: [], loading: true });\n\n  useEffect(() => {\n    getGifs(category).then((gifs) => {\n      setState({\n        data: gifs,\n        loading: false,\n      });\n    });\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from 'react';\nimport AddCategory from './AddCategory';\nimport Gifgrid from './Gifgrid';\n\nconst GitExpertApp = () => {\n  const [categories, setCategories] = useState(['One Punch']);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory addCategory={setCategories} />\n      <hr />\n      <ol>\n        {categories.map((category) => (\n          <Gifgrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n\nexport default GitExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GitExpertApp from './components/GitExpertApp';\nimport './index.css';\n\nReactDOM.render(<GitExpertApp />, document.getElementById('root'));\n"],"sourceRoot":""}